---
#
# Gather some cluster information
#
- name: Step 4 - Mount Filesystem - Rest-API
  debug:
    msg: Gather some information about cluster and state
  run_once: True

- name: Mount Filesystem - Rest-API | Storage Cluster (owner) | GET the Cluster Information
  uri:
    validate_certs: no
    force_basic_auth: yes
    url: https://{{ scale_remotemount_storage_gui_hostname }}:{{ storage_cluster_gui_port }}/{{ scalemgmt_endpoint }}/cluster
    method: GET
    user: "{{ scale_remotemount_storage_gui_username }}"
    password: "{{ scale_remotemount_storage_gui_password }}"
    body_format: json
    status_code:
      - 200
  register: owning_cluster_info
  run_once: True

- name: Mount Filesystem - Rest-API | scale_remotemount_debug | Storage Cluster  (owner) | Print the Cluster Information
  debug:
    msg: "{{ owning_cluster_info }}"
  when: scale_remotemount_debug is defined and scale_remotemount_debug | bool
  run_once: True

- name: Mount Filesystem - Rest-API | Client Cluster (access) | GET the Cluster Information
  shell: /usr/lpp/mmfs/bin/mmlscluster -Y | grep -v HEADER | grep clusterSummary | cut -d ':' -f 9
  register: access_cluster_info
  changed_when: false
  failed_when: false
  run_once: True

- name: Mount Filesystem - Rest-API | scale_remotemount_debug | Client Cluster (access) | Print the Cluster Information
  debug:
    msg: "{{ access_cluster_info }}"
  when: scale_remotemount_debug is defined and scale_remotemount_debug | bool
  run_once: True

- set_fact:
    access_cluster_name: "{{ access_cluster_info.stdout }}"
    owning_cluster_name: "{{ owning_cluster_info.json.cluster.clusterSummary.clusterName }}"
  run_once: True

#
# API call: remoteclusters List the clusters that mount filesystems of an owning cluster remotely.
# This API must be executed on the cluster that owns the filesystems that should be mounted remotely
#

- name: Step 5 - Mount Filesystem - Rest-API
  debug:
    msg: "On Storage Cluster, Check if filesystems is allready accessible for Client Cluster"
  run_once: True

- name: "Mount Filesystem - Rest-API | Storage Cluster (owner) | Check if filesystems is allready accessible for Client Cluster  ('{{ access_cluster_name }}')"
  uri:
    validate_certs: no
    force_basic_auth: yes
    url: https://{{ scale_remotemount_storage_gui_hostname }}:{{ storage_cluster_gui_port }}/{{ remote_mount_endpoint }}/remoteclusters/{{ access_cluster_name }}
    method: GET
    user: "{{ scale_remotemount_storage_gui_username }}"
    password: "{{ scale_remotemount_storage_gui_password }}"
    body_format: json
    status_code:
      - 200
  register: remote_clusters_results
  ignore_errors: true


- name: "Mount Filesystem - Rest-API | Storage Cluster (owner) | Check if filesystems is accessible on Client Cluster ('{{ access_cluster_name }}') - Debug"
  run_once: True
  debug:
    msg: "{{ remote_clusters_results.json.remoteClusters[0] | json_query('owningClusterFilesystems[*].filesystem') | join(', ')  }}"
  when: scale_remotemount_debug is defined and scale_remotemount_debug | bool

# Set current filesystem access and run only the access task on filesystem, this is a list

- set_fact:
    current_scale_remotemount_storage_filesystem_name: "{{ remote_clusters_results.json.remoteClusters[0] | json_query('owningClusterFilesystems[*].filesystem') | join(', ')  }}"
  run_once: True

- name: Step 6 - Mount Filesystem - Rest-API
  debug:
    msg: "On Storage Cluster, add filesystem access and attributes for the FileSystem by Client Cluster"
  run_once: True
  loop: "{{ scale_remotemount_filesystem_name }}"
  when:
   - 'item.scale_remotemount_storage_filesystem_name not in current_scale_remotemount_storage_filesystem_name'

- name: Mount Filesystem - Rest-API | Storage Cluster (owning) | Allow and Set the client cluster filesystem access attributes on the Storage Cluster
  uri:
    validate_certs: no
    force_basic_auth: true
    url: https://{{ scale_remotemount_storage_gui_hostname }}:{{ storage_cluster_gui_port }}/{{ remote_mount_endpoint }}/remoteclusters/{{ access_cluster_name }}/access/{{ item.scale_remotemount_storage_filesystem_name }}
    method: POST
    user: "{{ scale_remotemount_storage_gui_username }}"
    password: "{{ scale_remotemount_storage_gui_password }}"
    body_format: json
    body: |
      {
        "access": "{{ item.scale_remotemount_access_mount_attributes2 | default ('rw') }}"
      }
    status_code:
      - 202
  register: uri_result
  run_once: true
  loop: "{{ scale_remotemount_filesystem_name }}"
  when:
   - 'item.scale_remotemount_storage_filesystem_name not in current_scale_remotemount_storage_filesystem_name'

- name: Mount Filesystem - Rest-API | scale_remotemount_debug | Print out the Storage Cluster (owning) | Set the client cluster access attributes on the Storage Cluster
  debug:
    msg: "{{ item.json.jobs.0['jobId'] }}"
  loop: "{{ uri_result.results }}"
  run_once: True
  when:
   - 'item.item.scale_remotemount_storage_filesystem_name not in current_scale_remotemount_storage_filesystem_name'

- name: Mount Filesystem - Rest-API | Storage Cluster (owning) | Check the result of setting the access attributes on the Storage Cluster ##"{{ completed_check.json.jobs[0].jobId }}"
  uri:
    validate_certs: no
    force_basic_auth: true
    url: https://{{ scale_remotemount_storage_gui_hostname }}:{{ storage_cluster_gui_port }}/{{ scalemgmt_endpoint }}/jobs/{{ item.json.jobs.0['jobId'] }}
    method: GET
    user: "{{ scale_remotemount_storage_gui_username }}"
    password: "{{ scale_remotemount_storage_gui_password }}"
  register: completed_check
  until: completed_check.json.jobs[0].status == "COMPLETED"
  retries: "{{ restapi_retries_count }}"
  delay: "{{ restapi_retries_delay }}"
  run_once: True
  loop: "{{ uri_result.results }}"
  when:
   - 'item.item.scale_remotemount_storage_filesystem_name not in current_scale_remotemount_storage_filesystem_name'

- name: Step 7 - Mount Filesystem - Rest-API
  debug:
    msg: "On Client Cluster, Check if the Filesystem's is already configured."
  run_once: True

- name: Mount Filesystem - Rest-API | Mount Filesystem | Client Cluster access | Check if the Filesystem's is already configured with CLI.
  shell: "/usr/lpp/mmfs/bin/mmlsfs {{ item.scale_remotemount_client_filesystem_name }} -Y"
  register: remote_filesystem_results_cli
  changed_when: false
  failed_when: false
  run_once: True
  loop: "{{ scale_remotemount_filesystem_name }}"

- debug:
    msg: "{{ item.item.scale_remotemount_client_filesystem_name }}"
  run_once: True
  loop: "{{ remote_filesystem_results_cli.results }}"
  when: scale_remotemount_debug is defined and scale_remotemount_debug | bool

- name: Mount Filesystem - Rest-API | Client Cluster access | If filesystem is already configured, nothing to do."
  run_once: True
  debug:
    msg: Filesystem "{{ item.item.scale_remotemount_client_filesystem_name }}" is already configured, nothing to do.
  loop: "{{ remote_filesystem_results_cli.results }}"
  when:
    - item.rc == 0

- name: Step 8 - Mount Filesystem - Rest-API
  run_once: True
  debug:
    msg: "Add the remotefileystem and mount it on the Client Side"

- name: Mount Filesystem - Rest-API | Client Cluster (access) | Add remote filesystem
  run_once: True
  shell: |
    /usr/lpp/mmfs/bin/mmremotefs add {{ item.item.scale_remotemount_client_filesystem_name }} -f {{ item.item.scale_remotemount_storage_filesystem_name }} -C {{ owning_cluster_name }} -T {{ item.item.scale_remotemount_client_remotemount_path }} -o  {{ item.item.scale_remotemount_access_mount_attributes | default ('rw') }} -A {{ item.item.scale_remotemount_client_mount_fs | default ('yes') }} --mount-priority {{ item.item.scale_remotemount_client_mount_priority | default ('0') }}
  register: client_cluster_add_remotefs
  loop: "{{ remote_filesystem_results_cli.results }}"
  when:
    - item.rc != 0 or scale_remotemount_forceRun | bool
  failed_when:
    - "client_cluster_add_remotefs.rc != 0"

# Get node names

- name: Mount Filesystem - Rest-API | Client Cluster (access) | GET the cluster nodes name information
  shell: /usr/lpp/mmfs/bin/mmlscluster -Y | grep -v HEADER | grep clusterNode |  cut -d ':' -f 8
  register: access_node_names
  changed_when: false
  failed_when: false
  run_once: True

- name: scale_remotemount_debug | Client Cluster (access) | Print the Cluster Information
  debug:
    msg: "{{ access_node_names.stdout_lines |  join(',') }}"
  when: scale_remotemount_debug is defined and scale_remotemount_debug | bool
  run_once: True

- set_fact:
    accessing_nodes_name: []
  run_once: True

- set_fact:
    accessing_nodes_name: "{{ access_node_names.stdout_lines |  join(',')  }}"
  run_once: True

- name: Client Cluster (access) | Check if GPFS deamon is started
  shell: /usr/lpp/mmfs/bin/mmgetstate -Y -N {{ accessing_nodes_name }} | grep -v HEADER | cut -d ':' -f 9
  register: gpfs_deamon_state
  changed_when: false
  run_once: true

- name: Client Cluster (access) | Fail if GPFS deamon is not started
  fail:
    msg: "Scale/GPFS deamon is NOT running on one or serveral of your client cluster node. Check and run mmount manually"
  when: "'down' in gpfs_deamon_state.stdout"
  ignore_errors: true
  run_once: true

# Not adding any check here, run only when when mmremotefs add task is also run.

- name: Client Cluster (access) | Mount remote filesystem on all client nodes
  run_once: True
  command: /usr/lpp/mmfs/bin/mmmount {{ item.item.scale_remotemount_client_filesystem_name }} -N {{ accessing_nodes_name }}
  loop: "{{ remote_filesystem_results_cli.results }}"
  when:
    - item.rc != 0 or scale_remotemount_forceRun | bool
  register: client_cluster_mount_remotefs
  loop_control:
    label: "{{ item }}"
  failed_when:
    - "client_cluster_mount_remotefs.rc != 0"

# Adding a stdout from previous as the stdout from the loop abow can be confusing when several loops.

- name:  Client Cluster (access) | Mount remote filesystem on all client nodes - Show stdout from the previous task.
  debug:
    msg: "Message from mount remote filesystem task: {{ item }}"
  loop: "{{ client_cluster_mount_remotefs | json_query('results[*].stdout') }}"
  run_once: True
  ignore_errors: true
  changed_when: false