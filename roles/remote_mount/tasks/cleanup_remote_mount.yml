#
# Get some cluster information before starting Cleanup
#
- name: Cleanup | Storage Cluster (owner) | GET the Cluster Information
  uri:
    validate_certs: "{{ validate_certs_uri }}"
    force_basic_auth: yes
    url: https://{{ scale_remotemount_storage_gui_hostname }}:{{ storage_cluster_gui_port }}/{{ scalemgmt_endpoint }}/cluster
    method: GET
    user: "{{ scale_remotemount_storage_gui_username }}"
    password: "{{ scale_remotemount_storage_gui_password }}"
    body_format: json
    status_code:
      - 200
  register: owning_cluster_info
  run_once: True

- name: Cleanup | scale_remotemount_debug | Storage Cluster | Print the Cluster Information
  debug:
    msg: "{{ owning_cluster_info }}"
  when: scale_remotemount_debug is defined and scale_remotemount_debug | bool
  run_once: True

- name: Cleanup | Client Cluster (access) | GET the Cluster Information
  uri:
    validate_certs: "{{ validate_certs_uri }}"
    force_basic_auth: yes
    url: https://{{ scale_remotemount_client_gui_hostname }}:{{ client_cluster_gui_port }}/{{ scalemgmt_endpoint }}/cluster
    method: GET
    user: "{{ scale_remotemount_client_gui_username }}"
    password: "{{ scale_remotemount_client_gui_password }}"
    body_format: json
    status_code:
      - 200
  register: access_cluster_info
  run_once: True

- name: Cleanup | scale_remotemount_debug | Client Cluster | Print the Cluster Information
  debug:
    msg: "{{ access_cluster_info }}"
  when: scale_remotemount_debug is defined and scale_remotemount_debug | bool
  run_once: True

- set_fact:
    access_cluster_name: "{{ access_cluster_info.json.cluster.clusterSummary.clusterName }}"
    owning_cluster_name: "{{ owning_cluster_info.json.cluster.clusterSummary.clusterName }}"

- name: Cleanup | scale_remotemount_debug | Print out the Storage and Client Cluster Names
  debug:
    msg: "Access: {{ access_cluster_name }} and Owning: {{ owning_cluster_name }}"
  when: scale_remotemount_debug is defined and scale_remotemount_debug | bool
  run_once: True

#
# Client cluster Cleanup.
#

- name: Cleanup | Client Cluster (access) | Unmount and Remove the filesystem with loop
  include_tasks: cleanup_filesystems.yml
  loop: "{{ scale_remotemount_filesystem_name }}"
  run_once: True
  loop_control:
    loop_var: cleanup_filesystem_loop
    index_var: index

#
# Remove Storage Cluster from Client Cluster
#

- name: Cleanup | Client Cluster (access) | List the remote cluster already defined
  uri:
    validate_certs: "{{ validate_certs_uri }}"
    force_basic_auth: true
    url: https://{{ scale_remotemount_client_gui_hostname }}:{{ client_cluster_gui_port }}/{{ remote_mount_endpoint }}/owningclusters
    method: GET
    user: "{{ scale_remotemount_client_gui_username }}"
    password: "{{ scale_remotemount_client_gui_password }}"
  register: remote_clusters_result
  run_once: True

- name: Cleanup | scale_remotemount_debug | Print out the remote clusters
  debug:
    msg: "{{ remote_clusters_result.json }}"
  when: scale_remotemount_debug is defined and scale_remotemount_debug | bool
  run_once: True

# The remote_clusters_results is in an array, so looping here incase there are multiple remote clusters
# We want to delete the one where the owningCluster name matches what we are trying to do a remote mount on
- name: Cleanup | Delete the clusters on a loop...
  include_tasks: delete_remote_cluster.yml
  when: item.owningCluster == owning_cluster_name
  loop: "{{ remote_clusters_result.json.owningClusters }}"
  run_once: True

#
# Remove client cluster from Storage Cluster
#

- name: "Cleanup | Storage Cluster (owner) | Check if the Client Cluster ('{{ access_cluster_name }}') is already defined"
  uri:
    validate_certs: "{{ validate_certs_uri }}"
    force_basic_auth: yes
    url: https://{{ scale_remotemount_storage_gui_hostname }}:{{ storage_cluster_gui_port }}/{{ remote_mount_endpoint }}/remoteclusters/{{ access_cluster_name }}
    method: GET
    user: "{{ scale_remotemount_storage_gui_username }}"
    password: "{{ scale_remotemount_storage_gui_password }}"
    body_format: json
    status_code:
      - 200
  register: remote_clusters_results
  ignore_errors: true
  run_once: True

- name: Cleanup | Storage Cluster (owner) | Delete the Client Cluster, if it exists
  block:
    - name: "DELETE: {{ remote_mount_endpoint }}/remoteclusters/{{ access_cluster_name }}"
      uri:
        validate_certs: "{{ validate_certs_uri }}"
        force_basic_auth: true
        url: https://{{ scale_remotemount_storage_gui_hostname }}:{{ storage_cluster_gui_port }}/{{ remote_mount_endpoint }}/remoteclusters/{{ access_cluster_name }}
        method: DELETE
        user: "{{ scale_remotemount_storage_gui_username }}"
        password: "{{ scale_remotemount_storage_gui_password }}"
        status_code:
          - 202
      register: delete_call

    - name: "Cleanup | Checking results from the job: {{ delete_call.json.jobs[0].jobId }}"
      uri:
        validate_certs: "{{ validate_certs_uri }}"
        force_basic_auth: true
        url: https://{{ scale_remotemount_storage_gui_hostname }}:{{ storage_cluster_gui_port }}/{{ scalemgmt_endpoint }}/jobs/{{ delete_call.json.jobs[0].jobId }}
        method: GET
        user: "{{ scale_remotemount_storage_gui_username }}"
        password: "{{ scale_remotemount_storage_gui_password }}"
      register: completed_check
      until: completed_check.json.jobs[0].status == "COMPLETED"
      retries: "{{ restapi_retries_count }}"
      delay: "{{ restapi_retries_delay }}"
  when: not remote_clusters_results.failed
  run_once: True